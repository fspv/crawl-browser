name: Test Matrix - All Configurations

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      runtime:
        description: 'Specific runtime to test (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'docker'
          - 'podman'
      proxy:
        description: 'Specific proxy config to test (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'no-proxy'
          - 'with-proxy'
      extensions:
        description: 'Specific extension config to test (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'default'
          - 'single-extra'
          - 'all-extras'

env:
  DOCKER_BUILDKIT: 1

jobs:
  matrix-test:
    name: Test ${{ matrix.runtime }}-${{ matrix.proxy }}-${{ matrix.extensions }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        runtime: ${{ fromJSON(github.event.inputs.runtime && format('["{0}"]', github.event.inputs.runtime) || '["docker", "podman"]') }}
        proxy: ${{ fromJSON(github.event.inputs.proxy && format('["{0}"]', github.event.inputs.proxy) || '["no-proxy", "with-proxy"]') }}
        extensions: ${{ fromJSON(github.event.inputs.extensions && format('["{0}"]', github.event.inputs.extensions) || '["default", "single-extra", "all-extras"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Podman Compose (if needed)
        if: matrix.runtime == 'podman'
        run: |
          sudo apt-get update
          sudo apt-get install -y podman podman-compose

      - name: Build base image
        run: docker build -t crawl-browser:latest .

      - name: Run test configuration
        run: |
          ${{ matrix.runtime }}-compose \
            -f docker-compose/base.yml \
            -f docker-compose/runtime/${{ matrix.runtime }}.yml \
            -f docker-compose/proxy/${{ matrix.proxy }}.yml \
            -f docker-compose/extensions/${{ matrix.extensions }}.yml \
            up --abort-on-container-exit --exit-code-from test-runner

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.runtime }}-${{ matrix.proxy }}-${{ matrix.extensions }}
          path: test-results/
          retention-days: 7

      - name: Clean up
        if: always()
        run: |
          ${{ matrix.runtime }}-compose \
            -f docker-compose/base.yml \
            -f docker-compose/runtime/${{ matrix.runtime }}.yml \
            -f docker-compose/proxy/${{ matrix.proxy }}.yml \
            -f docker-compose/extensions/${{ matrix.extensions }}.yml \
            down -v || true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: matrix-test
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: Generate Summary Report
        run: |
          echo "# Test Matrix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Runtime | Proxy | Extensions | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check each test result
          for result_dir in all-results/test-results-*; do
            if [ -d "$result_dir" ]; then
              config=$(basename "$result_dir" | sed 's/test-results-//')
              runtime=$(echo "$config" | cut -d'-' -f1)
              proxy=$(echo "$config" | cut -d'-' -f2-3)
              extensions=$(echo "$config" | cut -d'-' -f4-)
              
              # Check if results.json exists and contains failures
              if [ -f "$result_dir/results.json" ]; then
                failures=$(jq -r '.stats.failures // 0' "$result_dir/results.json" 2>/dev/null || echo "0")
                if [ "$failures" = "0" ]; then
                  status="✅ Passed"
                else
                  status="❌ Failed"
                fi
              else
                status="⚠️ No results"
              fi
              
              echo "| $runtime | $proxy | $extensions | $status |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Upload Combined Results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: all-results/
          retention-days: 30

  # Keep the original simple test job as well
  quick-test:
    name: Quick Docker Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run quick test with default configuration
        run: make test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quick-test-results
          path: test-results/
          retention-days: 7